Object subclass: #Kember	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Zaemis'!!Kember methodsFor: 'as yet unclassified' stamp: 'TMB 6/15/2011 00:01'!md5: text	"return 32-char MD5 hash of the given text" 	^ (MD5 new hashStream: (ReadStream on: text)) hex.! !!Kember methodsFor: 'as yet unclassified' stamp: 'TMB 6/12/2011 22:06'!nextHash: hash	"increment the MD5 hash by 1"	|  a b carry incr value x |	value := ''.	carry := 0.	incr := '00000000000000000000000000000001'.	32 to: 1 by: -1 do: [:i |		a := (hash at: i) digitValue.		b := (incr at: i) digitValue.		x := (a + b + carry) radix: 16.		(x size = 2)			ifTrue: [				carry := (x at: 1) digitValue.				x := x at: 2]			ifFalse: [carry := 0].		value := x asString , value].	^ value.! !!Kember methodsFor: 'as yet unclassified' stamp: 'TMB 6/12/2011 22:05'!test: hash	"Test whether the hash exhibits Kember Identity"	| m |	Transcript cr; show: 'Testing ' , hash , '... '.	m := self md5: hash.	m = hash		ifTrue: [Transcript show: 'Pass!!']		ifFalse: [Transcript show: 'Fail!!'].	^ m = hash.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Kember class	instanceVariableNames: ''!!Kember class methodsFor: 'as yet unclassified' stamp: 'TMB 6/12/2011 22:24'!run	"check for hash that exhibits Kember Identity"	| k hash next zeroes |	k := Kember new.	zeroes := '00000000000000000000000000000000'.	hash := zeroes.	next := k nextHash: hash.	[next = zeroes | (k test: hash)] 		whileFalse: [			hash := next.			next := k nextHash: next].! !